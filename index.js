// Generated by CoffeeScript 1.6.3
(function() {
  var Backend, Handler, createServer, decode, dnode, encode, inspect, randomBytes, reconnect, _ref;

  createServer = require('http').createServer;

  randomBytes = require('crypto').randomBytes;

  _ref = require('coden'), encode = _ref.encode, decode = _ref.decode;

  dnode = require('dnode');

  reconnect = require('reconnect');

  inspect = require('util').inspect;

  Handler = (function() {
    function Handler(hdls) {
      this.hdls = hdls;
    }

    Handler.prototype.tryAppend = function() {
      if ((this.id != null) && (this.match != null) && (this.handler != null)) {
        return this.hdls.push([this.id, this.match, this.handler]);
      }
    };

    Handler.prototype.Id = function(id) {
      this.id = id;
      this.tryAppend();
      return this;
    };

    Handler.prototype.Match = function(match) {
      this.match = match;
      this.tryAppend();
      return this;
    };

    Handler.prototype.Handler = function(handler) {
      this.handler = handler;
      this.tryAppend();
      return this;
    };

    return Handler;

  })();

  Backend = (function() {
    function Backend(host, port) {
      this.host = host;
      if (port == null) {
        this.port = 8522;
      }
      this.hdls = [];
    }

    Backend.prototype.addHandler = function() {
      return new Handler(this.hdls);
    };

    Backend.prototype.register = function() {
      var d, hdls, r;
      hdls = this.hdls;
      d = dnode();
      d.on('remote', function(remote) {
        var k;
        k = randomBytes(256).toString('base64');
        return encode(k, function(err, result) {
          return remote.auth(k, result.toString(), function(addHandler) {
            var h, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = hdls.length; _i < _len; _i++) {
              h = hdls[_i];
              _results.push(addHandler.apply(null, h));
            }
            return _results;
          });
        });
      });
      r = reconnect(function(c) {
        return c.pipe(d).pipe(c);
      });
      return r.connect({
        host: this.host,
        port: this.port
      });
    };

    return Backend;

  })();

  module.exports = {
    Backend: Backend
  };

}).call(this);
